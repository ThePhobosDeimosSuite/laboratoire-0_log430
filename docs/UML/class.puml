@startuml class
title Class Diagram


package ProductMicroservice {
    class ProductService {
        + addProduct(name: String, category: String, price:Number): Void
        + updateProduct(productId:Number, name: String, category: String, price:Number): Void
        + searchProduct(productId:Number, name: String, category: String): Product
    }

    class Product {
        id: Number
        name: String
        category: String
        price: Number
    }
}

ProductService ..> Product

package StocksMicroservice {
    class StocksService {
        + addStocks(productId: Number, amount: Number, storeId: Number): Void
        + getStocks(productId: Number, storeId: Number): Stock
        + decrementStocks(productId: Number, amount: Number, storeId: Number): Void
        + addOrder(productId: Number, amount: Number, storeId: Number)
        + getOrder(): Order
    }
    class Order {
        amount: Number
        storeId: Number
    }

    class Stock {
        amount: Number
        storeId: Number
    }
}

StocksService ..> Stock
StocksService ..> Order


package SalesMicroservice {
    class SalesService {
        + createSales(productSales: ProductSales, storeId: Number): Void
        + getSales(salesId: String, storeId: Number): Sales
        + cancelSales(salesId: String, storeId: Number) : Void
    }
    class ProductSales {
        amount: Number
    }

    class Sales {
        date: DateTime
        isCancelled: Boolean
        storeId: Number
    }
}

SalesService ..> ProductSales
SalesService ..> Sales

package AccountMicroservice{
    class AccountService {
        + createAccount(name: String, password: String): Void
        + getAllAccount(): Account[]
    }

    class Account {
        name: String
        password: String
    }
}

AccountService ..> Account

package ShoppingCartMicroservice {
    class ShoppingCartService{
        + AddItemsToCart(productSalesCart: ProductSalesCart, storeId: Number, accountId: Number): Void
        + ClearCart(storeId: Number, accountId: Number): Void
    }

    class ProductSalesCart as "ProductSales" {
        amount: Number
    }

    class SalesCart as "Sales" {
        date: DateTime
        storeId: Number
    }
}

SalesOrchestrator ..> ShoppingCartService
SalesOrchestrator ..> SalesService
SalesOrchestrator ..> ProductService
SalesOrchestrator ..> StocksService

package SalesOrchestrator {
    class SalesOrchestratorService {
        + createCart(productSales: ProductSales, storeId: Number, accountId: Number): Void
        + checkoutCart(storeId: Number, accountId: Number): Void
    }
}

package PackageMicroservice {
    class PackageService {
        + sendPackageUpdate(packageId: number, state: State): Void
    }
}

package EmailMicroservice {
    class EmailService {
        + sendEmail(productSales: ProductSales, storeId: Number, accountId: Number): Void
    }
}

package EventStoreMicroservice {
    class EventStoreService {
        + getPackageState(packageId: number): State
        + savePackageState(packageId: number, state: State): Void
        + replay(): State[]
    }

    class PackageEvent {
        + date: DateTime
        + packageId: number
    }

    enum "State" as s {
        LabelCreated
        PackageSent
        OutForDelivery
        Delivered
    }
}

PackageService ..> EmailService
PackageService ..> EventStoreService


PackageEvent "*" o-- "1" s

Sales "1" *-- "*" ProductSales

SalesCart "1" *-- "*" ProductSalesCart

ProductSalesCart "*" o-- "1" Product

ProductSalesCart "0..1" o-- "1" Account

ProductSales "*" o-- "1" Product

Stock "*" o-- "1" Product

Order "*" o-- "1" Product




@enduml